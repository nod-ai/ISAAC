#pragma once

#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <string_view>
#include <vector>

namespace ptx {

enum Node_Type {
  // Tokens
  OPCODE_ADD,
  OPCODE_SUB,
  OPCODE_COS,
  OPCODE_SQRT,
  OPCODE_RSQRT,
  OPCODE_ADDC,
  OPCODE_MUL,
  OPCODE_SAD,
  OPCODE_EX2,
  OPCODE_LG2,
  OPCODE_RCP,
  OPCODE_SIN,
  OPCODE_MUL24,
  OPCODE_REM,
  OPCODE_MAD24,
  OPCODE_DIV,
  OPCODE_ABS,
  OPCODE_NEG,
  OPCODE_MIN,
  OPCODE_MAX,
  OPCODE_MAD,
  OPCODE_MADC,
  OPCODE_SET,
  OPCODE_SETP,
  OPCODE_SELP,
  OPCODE_SLCT,
  OPCODE_MOV,
  OPCODE_ST,
  OPCODE_COPYSIGN,
  OPCODE_SHFL,
  OPCODE_CVT,
  OPCODE_CVTA,
  OPCODE_ISSPACEP,
  OPCODE_AND,
  OPCODE_XOR,
  OPCODE_OR,
  OPCODE_BRA,
  OPCODE_CALL,
  OPCODE_EXIT,
  OPCODE_TRAP,
  OPCODE_RET,
  OPCODE_BRKPT,
  OPCODE_TEX,
  OPCODE_SUBC,
  OPCODE_LD,
  OPCODE_LDU,
  OPCODE_SULD,
  OPCODE_TXQ,
  OPCODE_SUST,
  OPCODE_SURED,
  OPCODE_SUQ,
  OPCODE_ATOM,
  OPCODE_RED,
  OPCODE_NOT,
  OPCODE_CNOT,
  OPCODE_VOTE,
  OPCODE_SHR,
  OPCODE_SHL,
  OPCODE_MEMBAR,
  OPCODE_FMA,
  OPCODE_PMEVENT,
  OPCODE_POPC,
  OPCODE_CLZ,
  OPCODE_BFIND,
  OPCODE_BREV,
  OPCODE_BFI,
  OPCODE_TESTP,
  OPCODE_TLD4,
  OPCODE_PREFETCH,
  OPCODE_PREFETCHU,
  OPCODE_BAR,
  OPCODE_BARRIER,
  TOKEN_COMMA,
  TOKEN_SEMICOLON,
  TOKEN_U8,
  TOKEN_U16,
  TOKEN_U32,
  TOKEN_U64,
  TOKEN_S8,
  TOKEN_S16,
  TOKEN_S32,
  TOKEN_S64,
  TOKEN_B8,
  TOKEN_B16,
  TOKEN_B32,
  TOKEN_B64,
  TOKEN_F16,
  TOKEN_F32,
  TOKEN_F64,
  TOKEN_IDENTIFIER,
  TOKEN_VERSION,
  TOKEN_DECIMAL_CONSTANT,
  TOKEN_DOUBLE_CONSTANT,
  TOKEN_UNRECOGNIZED,
  TOKEN_OPENBRACE,
  TOKEN_CLOSEBRACE,
  TOKEN_REG,
  TOKEN_LOC,
  TOKEN_LABEL,
  TOKEN_PRAGMA,
  TOKEN_STRING,
  TOKEN_CALL_PROTOTYPE,
  TOKEN_CALL_TARGETS,
  TOKEN_CARRY,
  TOKEN_UNSIGNED_DECIMAL_CONSTANT,
  TOKEN_SINGLE_CONSTANT,
  TOKEN_EXCLAMATION_MARK,
  TOKEN_UNDERSCORE,
  OPCODE_BFE,
  TOKEN_RN,
  TOKEN_RZ,
  TOKEN_RM,
  TOKEN_RP,
  TOKEN_TARGET,
  TOKEN_WEAK,
  TOKEN_VISIBLE,
  TOKEN_EXTERN,
  TOKEN_LOCAL,
  TOKEN_SHARED,
  TOKEN_PARAM,
  TOKEN_CONST,
  TOKEN_GLOBAL,
  TOKEN_FUNCTION,
  TOKEN_ALIGN,
  TOKEN_V2,
  TOKEN_V4,
  TOKEN_OPENPARENTHESIS,
  TOKEN_CLOSEPARENTHESIS,
  // empty node type
  noneNode,
  // leaf mode
  leaf,
  // grammer nodes
  statement,
  initializableDeclaration,
  nonEntryStatement,
  version,
  closeBrace,
  openBrace,
  entry,
  functionBody,
  functionDeclaration,
  entryDeclaration,
  entryStatements,
  completeEntryStatement,
  uninitializableDeclaration,
  entryStatement,
  registerDeclaration,
  location,
  pragma,
  callprototype,
  calltargets,
  instruction,
  addOrSub,
  addModifier,
  addOrSubOpcode,
  dataType,
  operand,
  optionalFloatingRoundNumber,
  optionalFtz,
  optionalSaturate,
  identifier,
  opcode,
  floatingRoundingToken,
  entryName,
  optionalArgumentList,
  performanceDirectives,
  optionalMetadata,
  guard,
  uninitializable,
  arrayDimensions,
  returnTypeList,
  addressableVariablePrefix,
  registerPrefix,
  argumentTypeList,
  registerIdentifierList,
  vectorIndex,
  identifierList,
  optionalVectorIndex,
  target,
  targetElementList,
  targetElement,
  surfaceDeclaration,
  textureDeclaration,
  globalSharedDeclaration,
  globalLocalDeclaration,
  addressSize,
  externOrVisible,
  uninitializableAddress,
  initializableAddress,
  initializable,
  functionBegin,
  functionBodyDefinition,
  functionName,
  optionalSemicolon,
  argumentList,
  argumentListBody,
  argumentListBegin,
  argumentListEnd,
  argumentDeclaration,
  parameter,
  alignment,
  statementVectorType,
  optionalReturnArgument,
  arrayDimensionSet,
  fileDeclaration,
  preprocessor,
  samplerDeclaration,
  label,
  floatRoundingToken,
  nonLabelOperand,
  constantOperand,
  shfl,
  vote,
  txq,
  trap,
  tld4,
  tex,
  testp,
  sust,
  suld,
  st,
  slct,
  setp,
  set,
  sad,
  ret,
  red,
  rcpSqrtInstructio,
  prmt,
  prefetchu,
  prefetch,
  popc,
  pmevent,
  notInstruction,
  mul,
  mul24,
  ftzInstruction2,
  ftzInstruction3,
  approxInstruction2,
  basicInstruction3,
  bfe,
  bfi,
  bfind,
  brev,
  branch,
  addCOrSubC,
  atom,
  bar,
  barrier,
  brkpt,
  clz,
  cvt,
  cvta,
  isspacep,
  div,
  exit,
  ld,
  mad,
  ldu,
  mad24,
  madc,
  membar,
  mov,
  selp,
  suq,
  sured,
};

class Token {
public:
  enum Node_Type token_type;
  std::string value;
  std::string text;

  Token();
  Token(std::string text);
  void clear();
  std::string repr();
};

class Lexer {
  std::vector<std::string> text;

public:
  std::vector<std::string> get_symbols(std::string file_path_);
  std::vector<Token> parse(std::vector<std::string> symbols);
};

} // namespace ptx